#include "signal_functions.h"

#include <string>
#include <cstring>

#include "Exception.h"
#include "Logger.h"
#include "string_functions.h"
#include "CallStack.h"

#if __APPLE__
    typedef sig_t sighandler_t;
#endif

namespace masl {

    void traceAndReraiseSignal(int theSignal);

    void initSignalHandling() {
        traceSignal( SIGINT );   //Ctrl-C (do we want this or is it to noisy?) [DS]
        traceSignal( SIGABRT );  //program detects error and calls abort
        traceSignal( SIGTERM );  //generated by kill command
        traceSignal( SIGSEGV );  //segmentation fault
        traceSignal( SIGBUS );   //bus error, access to an invalid address
    }

    void traceSignal( int theSignal ) {
        sighandler_t myReturnCode( 0 );
        myReturnCode = signal( theSignal, & traceAndReraiseSignal );
        if (myReturnCode == SIG_ERR) {
            throw Exception(std::string("Failed to install signal handler for signal ") +
                as_string( theSignal ) + " (" + strsignal( theSignal ) + ")", PLUS_FILE_LINE);
        }
    }

    void traceAndReraiseSignal(int theSignal) {
        // Only a few functions are guaranteed to work properly in signal handlers.
        // See signal (2) manpage for a full list. Not on the list are:
        //    - the stack tracing code used by StackTrace
        //    - C++ iostreams
        //    - strsignal
        // Calling signal() and raise() is safe. [DS]
        CallStack myStack;
        myStack.update();
        AC_ERROR << "Caught Signal " << theSignal << "  (" << strsignal(theSignal)
                 << ") at: ";
        myStack.dump();

        signal( theSignal, SIG_DFL );
        raise( theSignal );
    }
}


